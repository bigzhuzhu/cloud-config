<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

<!--    扫描组件纳入springIOC 容器中 ：如 @Controller  @Service  @Component @Repository 等-->
    <context:component-scan base-package="org.rola.basemvc.controller,org.rola.basemvc.interceptor,org.rola.basemvc.resolver"/>

<!--     视图控制器  view-controller,当控制器方法仅仅只是为了跳转页面，那么只需要设置视图名称时，可以将处理器方法使用 view-controller 标签表示-->
<!--    path: 处理的请求地址   view-name: 请求地址对应的视图名称-->
    <mvc:view-controller path="/vueForm" view-name="vue_form"></mvc:view-controller>
<!--
        注意：
        1. 当使用 view-controller 时，其他控制器中的请求映射将全部失效，
        2. 在HandlerAdaptor 中会自动装配—个消息转换器：Mappinglackson2HttpMessageConverter， 可以响应到刘览器的 java 对象转换为 json格式的宇符串
        此时需要设置开启 MVC 注解驱动
-->
    <mvc:annotation-driven/>

<!-- 静态资源 404，开放静态资源的访问：
   原理： 因为 web.xml 中配置的  url-pattern 为 /  所有的请求都会交给前端控制器去处理，
   那该静态资源的访问会被 SpringMVC（前端控制器） 处理，
   在前端控制器中也找不到对应的请求映射，那就会交给 tomcat 的 default Servlet(DefaultServletHttpRequestHandler) 去进行处理该映射路径，
   如果能找到该资源那就访问，找不到就还是404
 -->
    <mvc:default-servlet-handler/>

<!--     配置 Thymeleaf 视图解析器-->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
<!--         设置该视图解析器的优先级  可配置多个-->
        <property name="order" value="1"/>
<!--        该视图解析器使用的编码   -->
        <property name="characterEncoding" value="UTF-8"/>
<!--        模板-->
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
<!--                     解析当前视图的策略-->
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
<!--                         视图前缀 -->
                        <property name="prefix" value="/WEB-INF/templates/"/>
<!--                        视图后缀 -->
                        <property name="suffix" value=".html"/>
<!--                         模板模型     -->
                        <property name="templateMode" value="HTML5"/>
<!--                        页面编码  -->
                        <property name="characterEncoding" value="UTF-8"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>


    <!--    配置文件上传解析器，将上传的文件封装为 MultipartFile 对象，
            1. 通过 id="multipartResolver"  获取该对象，否则找不到该对象
            2. 导入 commons-uploadfile jar 包
    -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="UTF-8"></property>
        <!-- 文件上传的最大值5MB，5*1024*1024 -->
        <property name="maxUploadSize" value="5242880"></property>
    </bean>

    <!--    配置 异常处理器-->
<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
    <property name="exceptionMappings" >
        <props>
<!--            key  处理控制器中出现的异常的全类名    值： 出现异常后，跳转的异常视图名称-->
            <prop key="java.lang.Exception">error/except</prop>
        </props>
    </property>
<!--    ex   存储在请求域中错误异常信息的键，将域中异常信息共享-->
    <property name="exceptionAttribute" value="ex"></property>
</bean>

    <!--    配置拦截器  -->
    <mvc:interceptors>
<!--         方式一：直接配置所在的拦截器类-->
<!--        <bean class="org.rola.basemvc.interceptor.CustomInterceptor"></bean>-->
<!--        方式二：将加入 spring 容器中的拦截器配置-->
<!--        <ref bean="customInterceptor"></ref>-->
<!--         方式一  方式二：  对 DispatcherServlet 处理的所有请求进行拦截处理-->
<!--        方式三：自定义拦截器路径-->
        <mvc:interceptor>
<!--             拦截器要拦截的路径  如：拦截所有  /** （/** 两个 * 代表一级或多级结构） -->
            <mvc:mapping path="/**"/>
<!--            拦截器不拦截的路径-->
            <mvc:exclude-mapping path="/"/>
<!--            <bean class="org.rola.basemvc.interceptor.CustomInterceptor"></bean>-->
            <ref bean="customInterceptor"></ref>
        </mvc:interceptor>
    </mvc:interceptors>



    <!--     处理JSP 页面的解析器配置    -->
<!--    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">-->
<!--        <property name="prefix" value="/WEB-INF/templates/jsp/"></property>-->
<!--        <property name="suffix" value=".jsp"></property>-->
<!--    </bean>-->
</beans>